name: Build & Release Uspacy Notifier (Unsigned)

on:
  push:
#    tags:
#      - "*"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest ]
        python-version: [ "3.11" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install pyinstaller PySide6 websocket-client requests pillow
          fi

      # ---------- ICONS: Windows (.ico) ----------
      - name: Make Windows .ico from icon.png
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Force -Path dist-icons | Out-Null
          python -c "from PIL import Image; img=Image.open('icon.png').convert('RGBA'); sizes=[(16,16),(24,24),(32,32),(48,48),(64,64),(128,128),(256,256)]; img.save('dist-icons/app.ico', sizes=sizes)"
          Get-ChildItem dist-icons

      # ---------- ICONS: macOS (.icns) ----------
      - name: Make macOS .icns from icon.png
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          mkdir -p dist-icons icon.iconset
          for s in 16 32 64 128 256 512; do
            s2=$((s*2))
            sips -z $s $s icon.png --out icon.iconset/icon_${s}x${s}.png >/dev/null
            sips -z $s2 $s2 icon.png --out icon.iconset/icon_${s}x${s}@2x.png >/dev/null
          done
          iconutil -c icns icon.iconset -o dist-icons/app.icns
          rm -rf icon.iconset
          ls -lah dist-icons

      - name: Build (Windows onefile)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          pyinstaller --noconfirm --clean `
            --name UspacyNotifier `
            --onefile --windowed `
            --collect-all PySide6 `
            --collect-submodules websocket `
            --icon dist-icons/app.ico `
            --add-data "icon.png;." `
            --add-data "sounds/1.wav;sounds" `
            main.py
          Rename-Item -Path "dist/UspacyNotifier.exe" -NewName "UspacyNotifier-${{ github.ref_name }}-windows.exe"
          Get-ChildItem dist

      - name: Build (macOS .app, unsigned)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          # Прибираємо попередні залишки (уникнути дублікатів/symlink-колізій)
          rm -rf build dist UspacyNotifier.spec
          # Збірка .app без підпису. Уникаємо Qt3D-модулів, що провокують FileExistsError на macOS.
          pyinstaller --noconfirm --clean \
            --name UspacyNotifier \
            --windowed \
            --collect-all PySide6 \
            --collect-submodules websocket \
            --exclude-module PySide6.Qt3DAnimation \
            --exclude-module PySide6.Qt3DCore \
            --exclude-module PySide6.Qt3DExtras \
            --exclude-module PySide6.Qt3DInput \
            --exclude-module PySide6.Qt3DLogic \
            --exclude-module PySide6.Qt3DRender \
            --icon dist-icons/app.icns \
            --add-data "icon.png:." \
            --add-data "sounds/1.wav:sounds" \
            main.py
          # Пакуємо .app у zip для релізу
          ditto -c -k --sequesterRsrc --keepParent "dist/UspacyNotifier.app" "dist/UspacyNotifier-${{ github.ref_name }}-macos.zip"
          ls -lah dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            dist/UspacyNotifier-*
            dist/UspacyNotifier.app
          if-no-files-found: warn

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected-artifacts

      - name: List collected files
        run: |
          ls -lahR collected-artifacts

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Uspacy Notifier ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            collected-artifacts/**/UspacyNotifier-*
            collected-artifacts/**/UspacyNotifier.app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}